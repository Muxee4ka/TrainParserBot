import requests
import json

def test_station_search():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π"""
    
    # URL –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π
    suggest_url = "https://ticket.rzd.ru/api/v1/suggests"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        'Query': '–º–æ—Å–∫–≤–∞',
        'TransportType': 'bus,avia,rail,aeroexpress,suburban,boat',
        'GroupResults': 'true',
        'RailwaySortPriority': 'true',
        'SynonymOn': '1',
        'Language': 'ru'
    }
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = {
        'Accept': 'application/json, text/plain, */*',
        'Accept-Language': 'ru-RU,ru;q=0.9',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    }
    
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π...")
        print(f"–ó–∞–ø—Ä–æ—Å: {suggest_url}")
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        print("-" * 50)
        
        response = requests.get(suggest_url, params=params, headers=headers)
        response.raise_for_status()
        
        data = response.json()
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        stations = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if data.get('train'):
            stations.extend(data['train'])
        if data.get('city'):
            stations.extend(data['city'])
        if data.get('avia'):
            stations.extend(data['avia'])
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞–Ω—Ü–∏–π: {len(stations)}")
        print("\nüèÅ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏:")
        
        for i, station in enumerate(stations[:5], 1):
            name = station.get('name', 'N/A')
            code = station.get('expressCode', 'N/A')
            print(f"{i}. {name} (–∫–æ–¥: {code})")
            
        print("\nüìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:")
        print(json.dumps(data, indent=2, ensure_ascii=False))
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def test_train_search():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–≤"""
    
    # URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–≤
    api_url = "https://ticket.rzd.ru/api/v1/railway-service/prices/train-pricing"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞ - –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥)
    params = {
        "service_provider": "B2B_RZD",
        "getByLocalTime": "true",
        "carGrouping": "DontGroup",
        "destination": "2060000",  # –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
        "origin": "2060440",       # –ú–æ—Å–∫–≤–∞
        "departureDate": "2025-01-15T00:00:00",
        "specialPlacesDemand": "StandardPlacesAndForDisabledPersons",
        "carIssuingType": "Passenger",
        "getTrainsFromSchedule": "true",
        "adultPassengersQuantity": 1,
        "childrenPassengersQuantity": 0,
        "hasPlacesForLargeFamily": "false"
    }
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = {
        'Accept': 'application/json, text/plain, */*',
        'Accept-Language': 'ru-RU,ru;q=0.9',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    }
    
    try:
        print("\nüöÜ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–≤...")
        print(f"–ó–∞–ø—Ä–æ—Å: {api_url}")
        print(f"–ú–∞—Ä—à—Ä—É—Ç: –ú–æ—Å–∫–≤–∞ ‚Üí –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
        print(f"–î–∞—Ç–∞: 2025-01-15")
        print("-" * 50)
        
        response = requests.get(api_url, params=params, headers=headers)
        response.raise_for_status()
        
        data = response.json()
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üöÇ –ù–∞–π–¥–µ–Ω–æ –ø–æ–µ–∑–¥–æ–≤: {len(data.get('Trains', []))}")
        
        if data.get('Trains'):
            print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–µ–∑–¥–∞—Ö:")
            for i, train in enumerate(data['Trains'][:3], 1):
                train_number = train.get('TrainNumber', 'N/A')
                route_name = train.get('RouteName', '')
                departure_time = train.get('DepartureTime', '')
                arrival_time = train.get('ArrivalTime', '')
                
                print(f"{i}. –ü–æ–µ–∑–¥ {train_number}")
                print(f"   –ú–∞—Ä—à—Ä—É—Ç: {route_name}")
                print(f"   –í—Ä–µ–º—è: {departure_time} ‚Üí {arrival_time}")
                
                # –°—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞
                available_seats = 0
                for car_group in train.get('CarGroups', []):
                    if car_group.get('AvailabilityIndication') == 'Available':
                        available_seats += car_group.get('PlaceQuantity', 0)
                
                print(f"   –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç: {available_seats}")
                print()
        else:
            print("‚ùå –ü–æ–µ–∑–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –†–ñ–î")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å—Ç–∞–Ω—Ü–∏–π
    test_station_search()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ–µ–∑–¥–æ–≤
    test_train_search()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
