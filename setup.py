#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
"""

import subprocess
import sys
import os

ROOT = os.path.dirname(os.path.abspath(__file__))
REQ = os.path.join(ROOT, "requirements.txt")


def run(cmd: list[str]) -> int:
    print("$", " ".join(cmd))
    return subprocess.call(cmd)


def install_requirements() -> bool:
    print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt...")
    if not os.path.exists(REQ):
        print("‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    code = run([sys.executable, "-m", "pip", "install", "-r", REQ])
    if code != 0:
        print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return False
    print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True


def ensure_env_file() -> None:
    env_path = os.path.join(ROOT, ".env")
    if os.path.exists(env_path):
        print("‚ÑπÔ∏è .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    print("üìù –°–æ–∑–¥–∞—é .env (–ø—É—Å—Ç–æ–π —à–∞–±–ª–æ–Ω)...")
    with open(env_path, "w", encoding="utf-8") as f:
        f.write("BOT_TOKEN=\n")
        f.write("DATABASE_PATH=data/train_subscriptions.db\n")


def run_tests() -> bool:
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    code = run([sys.executable, "-m", "pytest", "-q"])
    if code != 0:
        print("‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
    return True


def main():
    print("üöÜ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ TrainParserBot")
    print("=" * 60)

    if not install_requirements():
        sys.exit(1)

    ensure_env_file()

    # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    os.makedirs(os.path.join(ROOT, "data"), exist_ok=True)

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    run_tests()

    print("\nüéâ –ì–æ—Ç–æ–≤–æ! –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: python bot.py")
    print("- –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: pytest")


if __name__ == "__main__":
    main()




