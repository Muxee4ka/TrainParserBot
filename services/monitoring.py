"""
–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å–æ–∫
"""
import asyncio
import logging
import time
from typing import List
from datetime import datetime

from database import DatabaseManager, Subscription
from services.rzd_api import RZDAPIService
from services.notification import NotificationService
from config import config

logger = logging.getLogger(__name__)


class MonitoringService:
    """–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    
    def __init__(self):
        self.db_manager = DatabaseManager()
        self.rzd_api = RZDAPIService()
        self.notification_service = NotificationService()
        self.is_running = False
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = True
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω")
        
        while self.is_running:
            try:
                await self.check_all_subscriptions()
                await asyncio.sleep(config.MONITORING_INTERVAL)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = False
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def check_all_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            subscriptions = self.db_manager.get_active_subscriptions()
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º {len(subscriptions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            
            for subscription in subscriptions:
                try:
                    await self.check_single_subscription(subscription)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    
    async def check_single_subscription(self, subscription: Subscription):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–µ–∑–¥–∞—Ö
            trains_data = self.rzd_api.search_trains(
                origin_code=subscription.origin_code,
                destination_code=subscription.destination_code,
                departure_date=subscription.departure_date,
                adult_passengers=subscription.adult_passengers,
                children_passengers=subscription.children_passengers
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Å—Ç
            available_trains = []
            for train in trains_data['trains']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–æ–º–µ—Ä–∞–º –ø–æ–µ–∑–¥–æ–≤
                if (subscription.train_numbers and 
                    train.get('TrainNumber') not in subscription.train_numbers.split(',')):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Å—Ç
                if self.rzd_api.check_available_seats(train, subscription.min_seats):
                    available_trains.append(train)
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–µ–∑–¥–∞ —Å –º–µ—Å—Ç–∞–º–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if available_trains:
                await self.send_availability_notification(subscription, available_trains)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}: {e}")
    
    async def send_availability_notification(self, subscription: Subscription, trains: List[dict]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç"""
        try:
            message = self.format_availability_message(subscription, trains)
            await self.notification_service.send_message(subscription.user_id, message)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscription.user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def format_availability_message(self, subscription: Subscription, trains: List[dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç"""
        message = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç!\n\n"
        message += f"–ü–æ–¥–ø–∏—Å–∫–∞ #{subscription.id}\n"
        message += f"–ú–∞—Ä—à—Ä—É—Ç: {subscription.origin_name} -> {subscription.destination_name}\n"
        message += f"–î–∞—Ç–∞: {subscription.departure_date[:10]}\n\n"
        
        for i, train in enumerate(trains[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø–æ–µ–∑–¥–æ–≤
            train_number = train.get('TrainNumber', 'N/A')
            departure_time = train.get('DepartureTime', '')
            arrival_time = train.get('ArrivalTime', '')
            
            message += f"{i}. üöÇ {train_number}\n"
            message += f"   ‚è∞ {departure_time} ‚Üí {arrival_time}\n"
            
            # –°—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞
            total_seats = self.rzd_api.count_available_seats(train)
            message += f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç: {total_seats}\n\n"
        
        return message
