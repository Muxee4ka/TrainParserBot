#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
"""

import requests
import json
from datetime import datetime

def test_station_search():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π...")
    
    test_queries = ["–º–æ—Å–∫–≤–∞", "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥", "–∫–∞–∑–∞–Ω—å"]
    
    for query in test_queries:
        print(f"\nüìù –ü–æ–∏—Å–∫: '{query}'")
        
        try:
            response = requests.get(
                'https://ticket.rzd.ru/api/v1/suggests',
                params={
                    'Query': query,
                    'TransportType': 'bus,avia,rail,aeroexpress,suburban,boat',
                    'GroupResults': 'true',
                    'RailwaySortPriority': 'true',
                    'SynonymOn': '1',
                    'Language': 'ru'
                },
                headers={
                    'Accept': 'application/json, text/plain, */*',
                    'Accept-Language': 'ru-RU,ru;q=0.9',
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            )
            
            if response.status_code == 200:
                data = response.json()
                stations = []
                
                if data.get('train'):
                    stations.extend(data['train'])
                if data.get('city'):
                    stations.extend(data['city'])
                
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞–Ω—Ü–∏–π: {len(stations)}")
                
                if stations:
                    print("üèÅ –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞–Ω—Ü–∏–π:")
                    for i, station in enumerate(stations[:3], 1):
                        name = station.get('name', 'N/A')
                        code = station.get('expressCode', 'N/A')
                        print(f"   {i}. {name} (–∫–æ–¥: {code})")
                else:
                    print("‚ùå –°—Ç–∞–Ω—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_train_search():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–≤"""
    print("\nüöÜ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–≤...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    routes = [
        {
            "name": "–ú–æ—Å–∫–≤–∞ ‚Üí –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "origin": "2000001",  # –ú–æ—Å–∫–≤–∞ –ö—É—Ä—Å–∫–∞—è
            "destination": "2000003",  # –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
            "date": "2025-01-15T00:00:00"
        },
        {
            "name": "–ú–æ—Å–∫–≤–∞ ‚Üí –ö–∞–∑–∞–Ω—å",
            "origin": "2000001",  # –ú–æ—Å–∫–≤–∞ –ö—É—Ä—Å–∫–∞—è
            "destination": "2000005",  # –ö–∞–∑–∞–Ω—å
            "date": "2025-01-15T00:00:00"
        }
    ]
    
    for route in routes:
        print(f"\nüìù –ú–∞—Ä—à—Ä—É—Ç: {route['name']}")
        
        try:
            response = requests.get(
                'https://ticket.rzd.ru/api/v1/railway-service/prices/train-pricing',
                params={
                    "service_provider": "B2B_RZD",
                    "getByLocalTime": "true",
                    "carGrouping": "DontGroup",
                    "destination": route['destination'],
                    "origin": route['origin'],
                    "departureDate": route['date'],
                    "specialPlacesDemand": "StandardPlacesAndForDisabledPersons",
                    "carIssuingType": "Passenger",
                    "getTrainsFromSchedule": "true",
                    "adultPassengersQuantity": 1,
                    "childrenPassengersQuantity": 0,
                    "hasPlacesForLargeFamily": "false"
                },
                headers={
                    'Accept': 'application/json, text/plain, */*',
                    'Accept-Language': 'ru-RU,ru;q=0.9',
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            )
            
            if response.status_code == 200:
                data = response.json()
                trains = data.get('Trains', [])
                
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–µ–∑–¥–æ–≤: {len(trains)}")
                
                if trains:
                    print("üöÇ –ü—Ä–∏–º–µ—Ä—ã –ø–æ–µ–∑–¥–æ–≤:")
                    for i, train in enumerate(trains[:3], 1):
                        train_number = train.get('TrainNumber', 'N/A')
                        departure_time = train.get('DepartureTime', '')
                        arrival_time = train.get('ArrivalTime', '')
                        
                        print(f"   {i}. –ü–æ–µ–∑–¥ {train_number}")
                        print(f"      –í—Ä–µ–º—è: {departure_time} ‚Üí {arrival_time}")
                        
                        # –°—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞
                        available_seats = 0
                        for car_group in train.get('CarGroups', []):
                            if car_group.get('AvailabilityIndication') == 'Available':
                                available_seats += car_group.get('PlaceQuantity', 0)
                        
                        print(f"      –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç: {available_seats}")
                else:
                    print("‚ùå –ü–æ–µ–∑–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        import sqlite3
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
        conn = sqlite3.connect("test_subscriptions.db")
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS subscriptions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                origin_code TEXT,
                origin_name TEXT,
                destination_code TEXT,
                destination_name TEXT,
                departure_date TEXT,
                train_numbers TEXT,
                car_types TEXT,
                min_seats INTEGER,
                adult_passengers INTEGER,
                children_passengers INTEGER,
                interval_minutes INTEGER,
                is_active BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        cursor.execute('''
            INSERT INTO subscriptions 
            (user_id, origin_code, origin_name, destination_code, destination_name, 
             departure_date, train_numbers, car_types, min_seats, adult_passengers, 
             children_passengers, interval_minutes)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            12345,
            "2000001",
            "–ú–æ—Å–∫–≤–∞ –ö—É—Ä—Å–∫–∞—è",
            "2000003", 
            "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "2025-01-15T00:00:00",
            "",
            "",
            1,
            1,
            0,
            5
        ))
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        cursor.execute('SELECT * FROM subscriptions WHERE user_id = ?', (12345,))
        subscription = cursor.fetchone()
        
        if subscription:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"   ID: {subscription[0]}")
            print(f"   –ú–∞—Ä—à—Ä—É—Ç: {subscription[3]} ‚Üí {subscription[5]}")
            print(f"   –î–∞—Ç–∞: {subscription[6]}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
        
        conn.close()
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
        import os
        if os.path.exists("test_subscriptions.db"):
            os.remove("test_subscriptions.db")
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å—Ç–∞–Ω—Ü–∏–π
    test_station_search()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ–µ–∑–¥–æ–≤
    test_train_search()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    test_database()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("‚Ä¢ API –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚Ä¢ API –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç") 
    print("‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    print("\nüöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")

if __name__ == "__main__":
    main()



