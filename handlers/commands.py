"""
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥
"""
import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command

from handlers.base import BaseHandler
from services.notification import NotificationService
from database import DatabaseManager

logger = logging.getLogger(__name__)


class CommandsHandler(BaseHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, router: Router):
        self.notification_service = NotificationService()
        self.db_manager = DatabaseManager()
        super().__init__(router)
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
        self.router.message.register(self.start_command, Command("start"))
        self.router.message.register(self.help_command, Command("help"))
        self.router.message.register(self.subscriptions_command, Command("subscriptions"))
    
    async def start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üöÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–≤ –†–ñ–î!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/search - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–µ–∑–¥–æ–≤
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
/subscriptions - –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏
/help - –ü–æ–º–æ—â—å

üí° –î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è!
        """
        await message.answer(welcome_text.strip())
    
    async def help_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üîç –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–æ–≤:
   ‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì)

üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:
   ‚Ä¢ –ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"
   ‚Ä¢ –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ –º–µ—Å—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
   ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:
   ‚Ä¢ /subscriptions - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫–ª—é—á–∏—Ç—å" –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π (–ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥)
‚Ä¢ –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 15.01.2025
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 5 –º–∏–Ω—É—Ç
        """
        await message.answer(help_text.strip())
    
    async def subscriptions_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscriptions"""
        try:
            user_id = message.from_user.id
            subscriptions = self.db_manager.get_user_subscriptions(user_id)
            
            if not subscriptions:
                await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.")
                return
            
            message_text = "üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
            keyboard = []
            
            for subscription in subscriptions:
                status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if subscription.is_active else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
                message_text += f"üîî –ü–æ–¥–ø–∏—Å–∫–∞ #{subscription.id}\n"
                message_text += f"   –ú–∞—Ä—à—Ä—É—Ç: {subscription.origin_name} -> {subscription.destination_name}\n"
                message_text += f"   –î–∞—Ç–∞: {subscription.departure_date[:10]}\n"
                message_text += f"   –°—Ç–∞—Ç—É—Å: {status}\n\n"
                
                if subscription.is_active:
                    keyboard.append([{
                        "text": f"‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å #{subscription.id}",
                        "callback_data": f"disable_sub_{subscription.id}"
                    }])
            
            if keyboard:
                await self.notification_service.send_message_with_keyboard(
                    user_id, message_text, keyboard
                )
            else:
                await message.answer(message_text)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫")
    
    async def handle(self, event: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
        pass
