"""
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
"""
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from handlers.base import BaseHandler
from services.rzd_api import RZDAPIService
from services.notification import NotificationService
from database import DatabaseManager, SearchState, Subscription
from config import config

logger = logging.getLogger(__name__)


class SearchHandler(BaseHandler):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    
    def __init__(self, router: Router):
        self.rzd_api = RZDAPIService()
        self.notification_service = NotificationService()
        self.db_manager = DatabaseManager()
        super().__init__(router)
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search
        self.router.message.register(self.search_command, Command("search"))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫ —Å—Ç–∞–Ω—Ü–∏–π)
        self.router.message.register(self.handle_text_message, F.text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.router.callback_query.register(self.handle_callback)

    def format_progress_message(self, search_state: SearchState) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–≤"""
        origin = search_state.origin_name or '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'
        destination = search_state.destination_name or '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'
        date = (
            datetime.strptime(search_state.departure_date, '%Y-%m-%dT%H:%M:%S').strftime('%d.%m.%Y')
            if search_state.departure_date else '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'
        )
        msg = (
            'üöÜ <b>–ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–æ–≤</b>\n\n'
            f'–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: <b>{origin}</b>\n'
            f'–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: <b>{destination}</b>\n'
            f'–î–∞—Ç–∞: <b>{date}</b>\n'
        )
        return msg

    async def search_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
        user_id = message.from_user.id
        search_state = self.db_manager.get_search_state(user_id) or SearchState(user_id=user_id)
        # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        search_state.origin_code = None
        search_state.origin_name = None
        search_state.destination_code = None
        search_state.destination_name = None
        search_state.departure_date = None
        search_state.progress_message_id = None
        search_state.selected_train_number = None
        search_state.selected_train_info = None
        search_state.search_step = 'origin'
        self.db_manager.save_search_state(search_state)
        progress_text = self.format_progress_message(search_state) + '\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:'
        sent = await message.answer(progress_text, parse_mode='HTML')
        search_state.progress_message_id = sent.message_id
        self.db_manager.save_search_state(search_state)

    async def handle_text_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º —ç—Ç–∞–ø–∞ –ø–æ–∏—Å–∫–∞"""
        try:
            user_id = message.from_user.id
            text = message.text.strip()
            search_state = self.db_manager.get_search_state(user_id)
            logger.info(f"[handle_text_message] user_id={user_id} search_step={getattr(search_state, 'search_step', None)} text='{text}'")
            if not search_state:
                search_state = SearchState(user_id=user_id)
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ progress_message, –¥–æ–±–∞–≤–∏—Ç—å –≤ messages_to_delete
            if message.message_id != search_state.progress_message_id:
                search_state.messages_to_delete.append(message.message_id)
                self.db_manager.save_search_state(search_state)
            # –Ø–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ —ç—Ç–∞–ø—É –ø–æ–∏—Å–∫–∞
            if search_state.search_step == 'origin':
                await self.search_stations(message, text, search_state, step='origin')
            elif search_state.search_step == 'destination':
                await self.search_stations(message, text, search_state, step='destination')
            elif search_state.search_step == 'date':
                await self.handle_date_input(message, search_state)
            else:
                sent = await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–µ–∑–¥–∞ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏.')
                search_state.messages_to_delete.append(sent.message_id)
                self.db_manager.save_search_state(search_state)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            sent = await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            search_state = self.db_manager.get_search_state(message.from_user.id) or SearchState(user_id=message.from_user.id)
            search_state.messages_to_delete.append(sent.message_id)
            self.db_manager.save_search_state(search_state)

    async def search_stations(self, message: Message, query: str, search_state: SearchState, step: str):
        """–ü–æ–∏—Å–∫ —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
        if len(query) < config.MIN_QUERY_LENGTH:
            sent = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º {config.MIN_QUERY_LENGTH} —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–∏")
            search_state.messages_to_delete.append(sent.message_id)
            self.db_manager.save_search_state(search_state)
            return
        try:
            stations = self.rzd_api.search_stations(query)
            if not stations:
                sent = await message.answer("–°—Ç–∞–Ω—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
                search_state.messages_to_delete.append(sent.message_id)
                self.db_manager.save_search_state(search_state)
                return
            keyboard = []
            for station in stations:
                station_name = self.rzd_api.format_station_name(station)
                callback_data = self.rzd_api.create_safe_callback_data(station)
                keyboard.append([{
                    "text": station_name,
                    "callback_data": callback_data
                }])
            prompt = '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:' if step == 'origin' else '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:'
            sent = await self.notification_service.send_message_with_keyboard(
                message.from_user.id,
                f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}':\n{prompt}",
                keyboard
            )
            # send_message_with_keyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False, –Ω–æ –Ω–∞–º –Ω—É–∂–µ–Ω message_id, –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å message.answer
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ message.answer –∏ –≤—Ä—É—á–Ω—É—é —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å reply_markup
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å—é–¥–∞ message_id, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π: {e}")
            sent = await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞–Ω—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            search_state.messages_to_delete.append(sent.message_id)
            self.db_manager.save_search_state(search_state)

    async def handle_callback(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–æ–±–∞–≤–∏—Ç—å select_train_)"""
        try:
            data = callback.data
            if data.startswith("station_"):
                await self.handle_station_selection(callback)
            elif data == "search_trains":
                await self.search_trains(callback)
            elif data == "subscribe_search":
                await self.subscribe_to_search(callback)
            elif data.startswith("select_train_"):
                await self.handle_select_train(callback)
            elif data == "subscribe_selected_train":
                await self.subscribe_to_selected_train(callback)
            elif data.startswith("subscribe_train_"):
                await self.subscribe_to_train(callback)
            elif data.startswith("disable_sub_"):
                await self.disable_subscription(callback)
            else:
                await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def _delete_user_messages(self, chat_id: int, search_state: SearchState):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ search_state.messages_to_delete, –æ—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫."""
        for msg_id in getattr(search_state, 'messages_to_delete', []):
            if msg_id and msg_id != search_state.progress_message_id:
                await self.notification_service.delete_message(chat_id, msg_id)
        search_state.messages_to_delete = []
        self.db_manager.save_search_state(search_state)

    async def handle_station_selection(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏ (—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ)"""
        try:
            data = callback.data
            user_id = callback.from_user.id
            parts = data.split('_', 2)
            if len(parts) < 2:
                await callback.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏')
                return
            station_code = parts[1]
            # –ï—Å–ª–∏ –≤ callback_data –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è, –∏—â–µ–º –µ–≥–æ –ø–æ –∫–æ–¥—É
            if len(parts) > 2 and parts[2].strip():
                station_name = parts[2]
            else:
                # –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ –∫–æ–¥—É —á–µ—Ä–µ–∑ API
                stations = self.rzd_api.search_stations(station_code)
                station_name = station_code
                for st in stations:
                    if str(st.get('expressCode')) == str(station_code):
                        station_name = self.rzd_api.format_station_name(st)
                        break
            search_state = self.db_manager.get_search_state(user_id)
            if not search_state:
                search_state = SearchState(user_id=user_id)
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å progress_message, –¥–æ–±–∞–≤–∏—Ç—å –≤ messages_to_delete
            if callback.message.message_id != search_state.progress_message_id:
                search_state.messages_to_delete.append(callback.message.message_id)
                self.db_manager.save_search_state(search_state)
            logger.info(f"[handle_station_selection] user_id={user_id} search_step(before)={search_state.search_step} station_code={station_code} station_name={station_name}")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é —Å—Ç–∞–Ω—Ü–∏—é –≤—ã–±–∏—Ä–∞–µ–º
            if search_state.search_step == 'origin':
                search_state.origin_code = station_code
                search_state.origin_name = station_name
                search_state.search_step = 'destination'
                next_step = '\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:'
                logger.info(f"[handle_station_selection] user_id={user_id} set search_step=destination")
            elif search_state.search_step == 'destination':
                search_state.destination_code = station_code
                search_state.destination_name = station_name
                search_state.search_step = 'date'
                next_step = '\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:'
                logger.info(f"[handle_station_selection] user_id={user_id} set search_step=date")
            else:
                await callback.answer('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏')
                return
            self.db_manager.save_search_state(search_state)
            logger.info(f"[handle_station_selection] user_id={user_id} search_step(after)={search_state.search_step}")
            progress_text = self.format_progress_message(search_state) + next_step
            if search_state.progress_message_id:
                await self.notification_service.edit_message(
                    callback.message.chat.id,
                    search_state.progress_message_id,
                    progress_text,
                    parse_mode='HTML'
                )
            else:
                sent = await callback.message.answer(progress_text, parse_mode='HTML')
                search_state.progress_message_id = sent.message_id
                self.db_manager.save_search_state(search_state)
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–æ–º–µ progress_message_id
            await self._delete_user_messages(callback.message.chat.id, search_state)
            await callback.answer()
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏: {e}')
            await callback.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏')
    
    async def handle_date_input(self, message: Message, search_state: SearchState):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã (—Ç–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ –¥–∞—Ç—ã ‚Äî —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –ø–æ–µ–∑–¥–∞)"""
        try:
            date_text = message.text.strip()
            date_obj = datetime.strptime(date_text, "%d.%m.%Y")
            if date_obj < datetime.now():
                progress_text = self.format_progress_message(search_state) + '\n‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É.'
                if search_state.progress_message_id:
                    await self.notification_service.edit_message(
                        message.chat.id,
                        search_state.progress_message_id,
                        progress_text,
                        parse_mode='HTML'
                    )
                else:
                    sent = await message.answer(progress_text, parse_mode='HTML')
                    search_state.messages_to_delete.append(sent.message_id)
                    self.db_manager.save_search_state(search_state)
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–æ–º–µ progress_message_id
                await self._delete_user_messages(message.chat.id, search_state)
                return
            formatted_date = date_obj.strftime("%Y-%m-%dT00:00:00")
            search_state.departure_date = formatted_date
            search_state.search_step = 'train'
            self.db_manager.save_search_state(search_state)
            # –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–æ–≤ —á–µ—Ä–µ–∑ API
            trains_data = self.rzd_api.search_trains(
                origin_code=search_state.origin_code,
                destination_code=search_state.destination_code,
                departure_date=search_state.departure_date,
                adult_passengers=search_state.adult_passengers,
                children_passengers=search_state.children_passengers
            )
            trains = trains_data.get('trains', [])
            if not trains:
                progress_text = self.format_progress_message(search_state) + '\n‚ùå –ü–æ–µ–∑–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.'
                if search_state.progress_message_id:
                    await self.notification_service.edit_message(
                        message.chat.id,
                        search_state.progress_message_id,
                        progress_text,
                        parse_mode='HTML'
                    )
                else:
                    sent = await message.answer(progress_text, parse_mode='HTML')
                    search_state.messages_to_delete.append(sent.message_id)
                    self.db_manager.save_search_state(search_state)
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–æ–º–µ progress_message_id
                await self._delete_user_messages(message.chat.id, search_state)
                return
            message_text = f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–µ–∑–¥–æ–≤: {trains_data['total_count']}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:"
            keyboard = []
            for i, train in enumerate(trains, 1):
                train_number = train.get('TrainNumber', 'N/A')
                route_name = train.get('RouteName', '')
                departure_time = train.get('DepartureTime', '')
                arrival_time = train.get('ArrivalTime', '')
                info = f"{train_number} {route_name} {departure_time}->{arrival_time}"
                message_text += f"\n{i}. üöÇ <b>{train_number}</b> {route_name} {departure_time}->{arrival_time}"
                keyboard.append([{
                    "text": f"–í—ã–±—Ä–∞—Ç—å {train_number}",
                    "callback_data": f"select_train_{train_number}_{route_name[:20].replace(' ', '')}"
                }])
            progress_text = self.format_progress_message(search_state) + '\n' + message_text
            if len(progress_text) > config.MAX_MESSAGE_LENGTH:
                progress_text = progress_text[:config.MAX_MESSAGE_LENGTH] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
            if search_state.progress_message_id:
                await self.notification_service.edit_message(
                    message.chat.id,
                    search_state.progress_message_id,
                    progress_text,
                    keyboard=keyboard,
                    parse_mode='HTML'
                )
            else:
                sent = await message.answer(progress_text, parse_mode='HTML')
                search_state.progress_message_id = sent.message_id
                self.db_manager.save_search_state(search_state)
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–æ–º–µ progress_message_id
            await self._delete_user_messages(message.chat.id, search_state)
        except ValueError:
            progress_text = self.format_progress_message(search_state) + '\n–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.01.2025)'
            if search_state.progress_message_id:
                await self.notification_service.edit_message(
                    message.chat.id,
                    search_state.progress_message_id,
                    progress_text,
                    parse_mode='HTML'
                )
            else:
                sent = await message.answer(progress_text, parse_mode='HTML')
                search_state.messages_to_delete.append(sent.message_id)
                self.db_manager.save_search_state(search_state)
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–æ–º–µ progress_message_id
            await self._delete_user_messages(message.chat.id, search_state)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {e}")
            progress_text = self.format_progress_message(search_state) + '\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã'
            if search_state.progress_message_id:
                await self.notification_service.edit_message(
                    message.chat.id,
                    search_state.progress_message_id,
                    progress_text,
                    parse_mode='HTML'
                )
            else:
                sent = await message.answer(progress_text, parse_mode='HTML')
                search_state.messages_to_delete.append(sent.message_id)
                self.db_manager.save_search_state(search_state)
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–æ–º–µ progress_message_id
            await self._delete_user_messages(message.chat.id, search_state)
    
    async def search_trains(self, callback: CallbackQuery):
        """–ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–æ–≤"""
        try:
            user_id = callback.from_user.id
            search_state = self.db_manager.get_search_state(user_id)
            
            if not search_state or not all([
                search_state.origin_code, 
                search_state.destination_code, 
                search_state.departure_date
            ]):
                await callback.message.edit_text("‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
                return
            
            await callback.message.edit_text("üîç –ò—â—É –ø–æ–µ–∑–¥–∞...")
            
            # –ü–æ–∏—Å–∫ –ø–æ–µ–∑–¥–æ–≤ —á–µ—Ä–µ–∑ API
            trains_data = self.rzd_api.search_trains(
                origin_code=search_state.origin_code,
                destination_code=search_state.destination_code,
                departure_date=search_state.departure_date,
                adult_passengers=search_state.adult_passengers,
                children_passengers=search_state.children_passengers
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            message = self.format_trains_message(trains_data, search_state)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(message) > config.MAX_MESSAGE_LENGTH:
                message = message[:config.MAX_MESSAGE_LENGTH] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
            
            await callback.message.edit_text(message, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–≤: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–µ–∑–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def format_trains_message_with_subscription(self, trains_data: dict, search_state: SearchState) -> tuple[str, list]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        trains = trains_data.get('trains', [])
        
        if not trains:
            return (f"‚ùå –ü–æ–µ–∑–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
                   f"–ú–∞—Ä—à—Ä—É—Ç: {search_state.origin_name} -> {search_state.destination_name}\n"
                   f"–î–∞—Ç–∞: {search_state.departure_date[:10]}"), []
        
        message = f"üöÜ –ù–∞–π–¥–µ–Ω–æ –ø–æ–µ–∑–¥–æ–≤: {trains_data['total_count']}\n\n"
        message += f"–ú–∞—Ä—à—Ä—É—Ç: {search_state.origin_name} -> {search_state.destination_name}\n"
        message += f"–î–∞—Ç–∞: {search_state.departure_date[:10]}\n\n"
        
        keyboard = []
        
        for i, train in enumerate(trains, 1):
            train_number = train.get('TrainNumber', 'N/A')
            route_name = train.get('RouteName', '')
            departure_time = train.get('DepartureTime', '')
            arrival_time = train.get('ArrivalTime', '')
            
            message += f"{i}. üöÇ <b>{train_number}</b> {route_name}\n"
            message += f"   ‚è∞ {departure_time} -> {arrival_time}\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–∞—Ö
            available_seats = self.rzd_api.count_available_seats(train)
            if available_seats > 0:
                message += f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç: {available_seats}\n"
            else:
                message += f"   ‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç\n"
            
            message += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –ø–æ–µ–∑–¥
            keyboard.append([{
                "text": f"üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {train_number}",
                "callback_data": f"subscribe_train_{train_number}"
            }])
        
        return message, keyboard

    def format_trains_message(self, trains_data: dict, search_state: SearchState) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞"""
        trains = trains_data.get('trains', [])
        
        if not trains:
            return (f"‚ùå –ü–æ–µ–∑–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
                   f"–ú–∞—Ä—à—Ä—É—Ç: {search_state.origin_name} -> {search_state.destination_name}\n"
                   f"–î–∞—Ç–∞: {search_state.departure_date[:10]}")
        
        message = f"üöÜ –ù–∞–π–¥–µ–Ω–æ –ø–æ–µ–∑–¥–æ–≤: {trains_data['total_count']}\n\n"
        message += f"–ú–∞—Ä—à—Ä—É—Ç: {search_state.origin_name} -> {search_state.destination_name}\n"
        message += f"–î–∞—Ç–∞: {search_state.departure_date[:10]}\n\n"
        
        for i, train in enumerate(trains, 1):
            train_number = train.get('TrainNumber', 'N/A')
            route_name = train.get('RouteName', '')
            departure_time = train.get('DepartureTime', '')
            arrival_time = train.get('ArrivalTime', '')
            
            message += f"{i}. üöÇ <b>{train_number}</b> {route_name}\n"
            message += f"   ‚è∞ {departure_time} -> {arrival_time}\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–∞—Ö
            available_seats = self.rzd_api.count_available_seats(train)
            if available_seats > 0:
                message += f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç: {available_seats}\n"
            else:
                message += f"   ‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç\n"
            
            message += "\n"
        
        return message
    
    async def subscribe_to_train(self, callback: CallbackQuery):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–µ–∑–¥ (–æ—á–∏—â–∞–µ–º progress_message_id –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)"""
        try:
            data = callback.data
            user_id = callback.from_user.id
            train_number = data.split("_")[-1]
            search_state = self.db_manager.get_search_state(user_id)
            if not search_state or not all([
                search_state.origin_code, 
                search_state.destination_code, 
                search_state.departure_date
            ]):
                progress_text = self.format_progress_message(search_state) + '\n‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
                if search_state and search_state.progress_message_id:
                    await self.notification_service.edit_message(
                        callback.message.chat.id,
                        search_state.progress_message_id,
                        progress_text,
                        parse_mode='HTML'
                    )
                else:
                    await callback.message.edit_text(progress_text, parse_mode='HTML')
                return
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–µ–∑–¥
            subscription = Subscription(
                id=None,
                user_id=user_id,
                origin_code=search_state.origin_code,
                origin_name=search_state.origin_name,
                destination_code=search_state.destination_code,
                destination_name=search_state.destination_name,
                departure_date=search_state.departure_date,
                train_numbers=train_number,  # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–µ–∑–¥
                car_types=search_state.car_types,
                min_seats=search_state.min_seats,
                adult_passengers=search_state.adult_passengers,
                children_passengers=search_state.children_passengers,
                interval_minutes=5,
                is_active=True,
                created_at=datetime.now()
            )
            subscription_id = self.db_manager.create_subscription(subscription)
            if subscription_id:
                result_text = (
                    f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    f"–ü–æ–µ–∑–¥: <b>{train_number}</b>\n"
                    f"–ú–∞—Ä—à—Ä—É—Ç: {search_state.origin_name} -> {search_state.destination_name}\n"
                    f"–î–∞—Ç–∞: {search_state.departure_date[:10]}\n\n"
                    f"–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ –º–µ—Å—Ç –≤ –ø–æ–µ–∑–¥–µ {train_number} –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏ —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –ø—Ä–∏ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏–∏."
                )
                if search_state.progress_message_id:
                    await self.notification_service.edit_message(
                        callback.message.chat.id,
                        search_state.progress_message_id,
                        result_text,
                        parse_mode='HTML'
                    )
                else:
                    await callback.message.edit_text(result_text, parse_mode='HTML')
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏ progress_message_id
                self.db_manager.clear_search_state(user_id)
            else:
                error_text = self.format_progress_message(search_state) + '\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏'
                if search_state.progress_message_id:
                    await self.notification_service.edit_message(
                        callback.message.chat.id,
                        search_state.progress_message_id,
                        error_text,
                        parse_mode='HTML'
                    )
                else:
                    await callback.message.edit_text(error_text, parse_mode='HTML')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ–µ–∑–¥: {e}")
            error_text = self.format_progress_message(search_state) + '\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏'
            if search_state and search_state.progress_message_id:
                await self.notification_service.edit_message(
                    callback.message.chat.id,
                    search_state.progress_message_id,
                    error_text,
                    parse_mode='HTML'
                )
            else:
                await callback.message.edit_text(error_text, parse_mode='HTML')
    
    async def subscribe_to_search(self, callback: CallbackQuery):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"""
        try:
            user_id = callback.from_user.id
            search_state = self.db_manager.get_search_state(user_id)
            
            if not search_state or not all([
                search_state.origin_code, 
                search_state.destination_code, 
                search_state.departure_date
            ]):
                await callback.message.edit_text("‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription = Subscription(
                id=None,
                user_id=user_id,
                origin_code=search_state.origin_code,
                origin_name=search_state.origin_name,
                destination_code=search_state.destination_code,
                destination_name=search_state.destination_name,
                departure_date=search_state.departure_date,
                train_numbers=search_state.train_numbers,
                car_types=search_state.car_types,
                min_seats=search_state.min_seats,
                adult_passengers=search_state.adult_passengers,
                children_passengers=search_state.children_passengers,
                interval_minutes=5,
                is_active=True,
                created_at=datetime.now()
            )
            
            subscription_id = self.db_manager.create_subscription(subscription)
            
            if subscription_id:
                await callback.message.edit_text(
                    f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    f"–ú–∞—Ä—à—Ä—É—Ç: {search_state.origin_name} -> {search_state.destination_name}\n"
                    f"–î–∞—Ç–∞: {search_state.departure_date[:10]}\n\n"
                    f"–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ –º–µ—Å—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏ —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –ø—Ä–∏ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏–∏."
                )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
                self.db_manager.clear_search_state(user_id)
            else:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    
    async def disable_subscription(self, callback: CallbackQuery):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            data = callback.data
            user_id = callback.from_user.id
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏
            subscription_id = int(data.split("_")[-1])
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            success = self.db_manager.disable_subscription(subscription_id, user_id)
            
            if success:
                await callback.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!")
            else:
                await callback.message.edit_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    
    async def handle_select_train(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–µ–∑–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            data = callback.data
            user_id = callback.from_user.id
            parts = data.split('_', 3)
            if len(parts) < 3:
                await callback.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–µ–∑–¥–∞')
                return
            train_number = parts[2]
            train_info = parts[3] if len(parts) > 3 else train_number
            search_state = self.db_manager.get_search_state(user_id)
            if not search_state:
                await callback.answer('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞')
                return
            search_state.selected_train_number = train_number
            search_state.selected_train_info = train_info
            search_state.search_step = 'done'
            self.db_manager.save_search_state(search_state)
            progress_text = self.format_progress_message(search_state) + f'\n–ü–æ–µ–∑–¥: <b>{train_number}</b> {train_info}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –ø–æ–µ–∑–¥.'
            keyboard = [[{"text": "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "callback_data": "subscribe_selected_train"}]]
            if search_state.progress_message_id:
                await self.notification_service.edit_message(
                    callback.message.chat.id,
                    search_state.progress_message_id,
                    progress_text,
                    keyboard=keyboard,
                    parse_mode='HTML'
                )
            else:
                sent = await callback.message.answer(progress_text, parse_mode='HTML')
                search_state.progress_message_id = sent.message_id
                self.db_manager.save_search_state(search_state)
            await callback.answer()
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–µ–∑–¥–∞: {e}')
            await callback.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–µ–∑–¥–∞')

    async def subscribe_to_selected_train(self, callback: CallbackQuery):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–µ–∑–¥ (—á–µ—Ä–µ–∑ —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞)"""
        try:
            user_id = callback.from_user.id
            search_state = self.db_manager.get_search_state(user_id)
            if not search_state or not all([
                search_state.origin_code,
                search_state.destination_code,
                search_state.departure_date,
                search_state.selected_train_number
            ]):
                progress_text = self.format_progress_message(search_state) + '\n‚ùå –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
                if search_state and search_state.progress_message_id:
                    await self.notification_service.edit_message(
                        callback.message.chat.id,
                        search_state.progress_message_id,
                        progress_text,
                        parse_mode='HTML'
                    )
                else:
                    await callback.message.edit_text(progress_text, parse_mode='HTML')
                return
            subscription = Subscription(
                id=None,
                user_id=user_id,
                origin_code=search_state.origin_code,
                origin_name=search_state.origin_name,
                destination_code=search_state.destination_code,
                destination_name=search_state.destination_name,
                departure_date=search_state.departure_date,
                train_numbers=search_state.selected_train_number,
                car_types=search_state.car_types,
                min_seats=search_state.min_seats,
                adult_passengers=search_state.adult_passengers,
                children_passengers=search_state.children_passengers,
                interval_minutes=5,
                is_active=True,
                created_at=datetime.now()
            )
            subscription_id = self.db_manager.create_subscription(subscription)
            if subscription_id:
                result_text = (
                    f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    f"–ü–æ–µ–∑–¥: <b>{search_state.selected_train_number}</b> {search_state.selected_train_info or ''}\n"
                    f"–ú–∞—Ä—à—Ä—É—Ç: {search_state.origin_name} -> {search_state.destination_name}\n"
                    f"–î–∞—Ç–∞: {search_state.departure_date[:10]}\n\n"
                    f"–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ –º–µ—Å—Ç –≤ –ø–æ–µ–∑–¥–µ {search_state.selected_train_number} –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏ —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –ø—Ä–∏ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏–∏."
                )
                if search_state.progress_message_id:
                    await self.notification_service.edit_message(
                        callback.message.chat.id,
                        search_state.progress_message_id,
                        result_text,
                        parse_mode='HTML'
                    )
                else:
                    await callback.message.edit_text(result_text, parse_mode='HTML')
                self.db_manager.clear_search_state(user_id)
            else:
                error_text = self.format_progress_message(search_state) + '\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏'
                if search_state and search_state.progress_message_id:
                    await self.notification_service.edit_message(
                        callback.message.chat.id,
                        search_state.progress_message_id,
                        error_text,
                        parse_mode='HTML'
                    )
                else:
                    await callback.message.edit_text(error_text, parse_mode='HTML')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–µ–∑–¥: {e}")
            error_text = self.format_progress_message(search_state) + '\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏'
            if search_state and search_state.progress_message_id:
                await self.notification_service.edit_message(
                    callback.message.chat.id,
                    search_state.progress_message_id,
                    error_text,
                    parse_mode='HTML'
                )
            else:
                await callback.message.edit_text(error_text, parse_mode='HTML')
    
    async def handle(self, event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
        pass
